import { defineStore } from "pinia";
import { ref } from "vue";
import axios from "axios";

const API_URL = "http://localhost:5000/api";

export const useJobStore = defineStore("job", () => {
  const jobs = ref([]);
  const loading = ref(false);
  const errorMessage = ref(null);

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫, –æ–±–Ω–æ–≤–ª—è—é—â–∞—è errorMessage
  const handleError = (err, defaultMessage) => {
    console.error("‚ùå –û—à–∏–±–∫–∞:", defaultMessage, err);
    errorMessage.value = err.response?.data?.message || defaultMessage || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞";
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
  const fetchJobs = async () => {
    loading.value = true;
    errorMessage.value = null;
    try {
      console.log("üöÄ –ó–∞–ø—Ä–æ—Å –≤–∞–∫–∞–Ω—Å–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞:", `${API_URL}/jobs`);
      const response = await axios.get(`${API_URL}/jobs`);
      console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.data);

      if (!Array.isArray(response.data)) {
        throw new Error("–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ –≤–∞–∫–∞–Ω—Å–∏–π, –ø–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      jobs.value = response.data.map(job => ({
        ...job,
        id: job.id || `job_${Date.now()}_${Math.random()}`,
      }));
      console.log("‚úÖ –í–∞–∫–∞–Ω—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ jobs.value:", jobs.value);
    } catch (err) {
      handleError(err, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä.");
      jobs.value = [];
    } finally {
      loading.value = false;
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —á–µ—Ä–µ–∑ POST-–∑–∞–ø—Ä–æ—Å
  const addJob = async (formData) => {
    loading.value = true;
    errorMessage.value = null;
    try {
      console.log("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏...");
      const response = await axios.post(`${API_URL}/jobs`, formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });
      console.log("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", response.data);
      await fetchJobs(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      return response.data;
    } catch (err) {
      handleError(err, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.");
      throw err;
    } finally {
      loading.value = false;
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ interviewDate
  const updateJobStatus = async (jobId, status, interviewDate = null) => {
    try {
      console.log(
        `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId} –Ω–∞ ${status}` +
          (interviewDate ? ` —Å –¥–∞—Ç–æ–π –∏–Ω—Ç–µ—Ä–≤—å—é ${interviewDate}` : "")
      );
      await axios.put(`${API_URL}/jobs/${jobId}`, { status, interviewDate });
      await fetchJobs();
    } catch (err) {
      handleError(err, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏.");
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–∏
  const updateJobNotes = async (jobId, notes) => {
    try {
      console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}`);
      await axios.put(`${API_URL}/jobs/${jobId}`, { notes });
      await fetchJobs();
    } catch (err) {
      handleError(err, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏.");
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  const removeJob = async (jobId) => {
    try {
      console.log(`üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}`);
      await axios.delete(`${API_URL}/jobs/${jobId}`);
      await fetchJobs();
    } catch (err) {
      handleError(err, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.");
    }
  };

  return {
    jobs,
    loading,
    errorMessage,
    fetchJobs,
    addJob,
    updateJobStatus,
    updateJobNotes,
    removeJob,
  };
});
